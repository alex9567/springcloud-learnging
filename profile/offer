1.题目：二维数组种的查找，在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
（1，2，3）
（4，5，6）
（7，8，9）
解答：
方法1，二分发循环查找
方法2，直接从第一行的最后一个开始找，大就向下，小就向左

2.题目：替换空格，请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
解答：
方法1，replace函数（不推荐）
方法2，用空格split,然后循环拼接
方法3，直接在当前字符串从前向后替换
方法四，先计算替换后的字符串需要多大的空间，并对原字符串空间进行扩容；
从后往前替换字符串的话，每个字符串只需要移动一次；
如果从前往后，每个字符串需要多次移动，效率较低。

3.题目：从头到尾打印链表，输入一个链表，按链表从尾到头的顺序返回一个ArrayList。
解答：
方法1，借助于栈：我们从头到尾遍历链表，可以把遍历的结果放入栈中（先进后出），这样输出栈就实现了从尾到头输出链表元素。有额外的空间消耗
方法2，翻转链表再打印，没有空间消耗但是破坏链表结构（头插法，头部空出来，反转。或者从尾部开始新的一个，开始反转）
方法3，递归，栈也是递归的思路

4.题目：重建二叉树，输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
解答：
方法1
先序遍历第一个位置肯定是根节点node，
中序遍历的根节点位置在中间p，在p左边的肯定是node的左子树的中序数组，p右边的肯定是node的右子树的中序数组 
另一方面，先序遍历的第二个位置到p，也是node左子树的先序子数组，剩下p右边的就是node的右子树的先序子数组
把四个数组找出来，分左右递归调用即可

5.题目：用两个栈实现队列，用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。
解答：
方法1，队列（表的前端进行删除操作，而在表的后端进行插入操作）
A栈插入，然后如果要删除，就A栈倒入B栈，然后删除，如果还要插入，就再次倒入A栈，再次插入

6.题目：旋转数组的最小数字，把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
解答：
方法1，直接遍历，找到最小值
方法2，由于旋转后，前面是一个递增子序列，后面是一个递增子序列，找出不是递增的那个元素
方法3，二分法

7.题目：斐波那契数列，大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。n<=39
解答：
F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n>=3，n∈N*），判断0，1，从2开始

8.题目：跳台阶，一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
解答：
递推公式：F（n）=F（n-1）+F（n-2），是个斐波那契数列，这个鬼答案本身就是这个斐波那契数列，
方法1：自底向上，使用迭代
方法2：自顶向下，使用递归

9.题目：变态跳台阶，一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
解答：
递推公式：f(n) = 2*f(n-1)
方法1：自底向上，使用迭代
方法2：自顶向下，使用递归

10.题目：矩形覆盖，我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
解答：
递推公式：F（n）=F（n-1）+F（n-2），是个斐波那契数列，这个鬼答案本身就是这个斐波那契数列，
方法1：自底向上，使用迭代
方法2：自顶向下，使用递归

11.题目：二进制中1的个数，输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
解答：
方法1，转为string，判断有多少个1
方法2，java中的int类型用32位表示，把这个数依次无符号右移（考虑到负数所以选择无符号右移）然后与1作与运算。如果结果为1则count自增
if((n >>> i & 1) == 1)++count;
方法3，将n与n-1想与会把n的最右边的1去掉，再让count++即可计算出有多少个1
方法4,        
if ((n & flag) != 0)count++;
flag=flag << 1;

12.题目：数值的整数次方，给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。保证base和exponent不同时为0
解答：
方法1，直接累乘（✖️）
方法2，写出指数的二进制表达，例如13表达为二进制1101。 通过&1和>>1来逐位读取1101，为1时将该位代表的乘数累乘到最终结果。举例:10^1101 = 10^0001*10^0100*10^1000

13.题目：调整数组顺序使奇书位于偶数前面，输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。
解答：
方法1，队列中添加两个指针a,b。其中a是下一个奇数位所要放置的位置，b指针用来遍历队列。
判断b指向元素是否为奇数，如果不是b后移一位继续判断是否为奇数，如果是奇数，则将a与b之间的元素后移一位，并将b原来的值插入a处，同时将a指针后移一位。
方法2，重新定义一个相同大小数组，遍历第一个数组，同时从两端进行判断，从左边的只负责判断奇数，遇到就放入新数组（正向放入）；从右边的只负责判断偶数，遇到就放入新数组（后从向前放），一遍循环结束，
方法3，插排
方法4，冒泡排
方法5，快排不稳定，不适用于这道题
方法6，新建一个数组，空间换时间

14.题目：链表中倒数第k个节点，输入一个链表，输出该链表中倒数第k个结点。
解答：
考虑链表的长度是否大于k
方法1，直接压入栈中，先进后出，再出倒k即可
方法2，双指针，a，b，a先走到k点,再一起向后走，碰到尾部，这时b指针即是k的位置

15.题目：反转链表，输入一个链表，反转链表后，输出新链表的表头。
解答：
考虑空链表的情况
方法1，直接压入栈中，先进后出
方法2，递归法反转链表，总体来说，递归法是从最后一个Node开始，在弹栈的过程中将指针顺序置换的。
方法3，遍历法就是在链表遍历的过程中将指针顺序置换

16.题目：合并2个排序的链表，输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。
解答：
方法1，递归比较，从第一个开始，谁大就把谁放入第三个链表中，注意2个链表的判空（递归方法）
方法2，非递归比较，正向便利，链表越来越短，直到一方为空为止，也是放入第三个链遍（while方法）

17.题目：树的子结构，输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）
解答：
方法1，递归判断，tree1为原子树，tree2为子子树，
先tree1和tree2进行判空，tree左子树判断是否子，tree右子树判断是否子，这个方法本身也是递归，既是遍历tree1树的每一个节点，判断从这个节点开始的树是否和tree2相同
比较方法：如果Tree2已经遍历完了都能对应的上，返回true，如果Tree2还没有遍历完，Tree1却遍历完了。返回false，如果其中有一个点没有对应上，返回false，如果根节点对应的上，那么就分别去子节点里面匹配。（这个方法是递归的）

18.题目,二叉树的镜像，操作给定的二叉树，将其变换为源二叉树的镜像。
解答：
方法1，自上而下的递归调用，交换每一个节点的左右子树

19.题目,顺时针打印矩阵，输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
解答：
方法1，顺时针打印就是按圈数循环打印，假定矩阵大小为mxn，则圈数cir = （min（m，n）-1）/2+1
例如4x3的矩阵cir = （3-1）/2+1 = 2，跟实际相符。
一圈包含两行或者两列，但要考虑一下两中特殊情况：
在打印的时候会出现某一圈中只包含一行，要判断从左向右打印和从右向左打印的时候是否会出现重复打印，
同样只包含一列时，要判断从上向下打印和从下向上打印的时候是否会出现重复打印的情况
方法2，每次打印第一行，然后去掉该行，然后逆时针反转数组，再打印第一行，再去掉，反复，直到去掉所有行为止
方法3，打印一个圈，然后去掉这个圈，递归打印数组结束

20.题目，包含min函数的栈，定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。（push,top,min,top一共4个方法）
解答：
方法1，2个栈，一个栈正常操作，一个是最小元素栈，每次的最小值都在最上面，出栈的时候判断是否是最小，最小的话2个栈都要压出去,
比如，data中依次入栈，5,  4,  3, 8, 10, 11, 12, 1
则min依次入栈，5,  4,  3，no,no, no, no, 1

21.题目，栈的压入，弹出序列
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
解答：
方法1，用辅助栈进行判断，模拟一个深度n的栈，模拟出栈入栈
方法2，取出弹出序列的第一个元素，然后找到此元素
在入栈序列的位置n，那么入栈序列的前n个元素如果依次等于弹出序列从后往前数的n个元素，那么此
弹出序列就是正确的弹出序列！
如果第n个元素已经出栈，前面n-1个元素如果在n之后出栈的话一定是逆序出栈的。

22.题目，从上往下打印二叉树，从上往下打印出二叉树的每个节点，同层节点从左至右打印。
解答：
这是一道树的广度优先遍历的题，建议对这方面知识不明白的朋友先去了解一下广度优先遍历和深度优先遍历的原理
方法1，思路是用arraylist模拟一个队列来存储相应的TreeNode
方法2，直接使用队列，进行二叉树的层次遍历

23.题目，二叉搜索树的后序遍历顺序，输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。
解答：
BST的后序序列的合法序列是，对于一个序列S，最后一个元素是x （也就是根），如果去掉最后一个元素的序列为T，那么T满足：T可以分成两段，前一段（左子树）小于x，后一段（右子树）大于x，且这两段（子树）都是合法的后序序列。完美的递归定义
后序遍历 的序列中，最后一个数字是树的根节点 ，数组中前面的数字可以分为两部分：第一部分是左子树节点 的值，都比根节点的值小；第二部分 是右子树 节点的值，都比 根 节点 的值大，后面用递归分别判断前后两部分 是否 符合以上原则
重点在于二叉搜索树，既是BST,
若它的左子树不空，则左子树上所有结点的值均小于根结点的值；
若它的右子树不空，则右子树上所有结点的值均大于根结点的值；
它的左右子树也都是二叉排序树。
中序遍历可以得到一个递增序列
方法1，递归处理，首先以[4, 8, 6, 12, 16, 14, 10]为例，10为中值，然后开始找12，16，14，进行判断是否符合这个规则，不符合则错误，否则就对，然后判断4，8，6，判断是否符合规则，如此递归。（就是不停的判断是否是一个BST二叉树）

24.题目，二叉树中和为某一值的路径，输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)
解答：
深度优先（DFS）,广度优先（BFS）
2个方法找，1，递归，2非递归
方法1，可以用一个带记忆的深度优先，不停的找，遍历每一个路径，找出符合数组的长度

25.题目，复杂链表的复制，输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）
解答：
方法1，
遍历链表，复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；
重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;
拆分链表，将链表拆分为原链表和复制后的链表
方法2，遍历练表创建一般指针，再便利链表创建特殊指针
方法3，遍历链表放到hash上。这样再次遍历的时候可以直接找到对应指针

26.二叉搜索树与双向链表，输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。
解答：
方法1，
a.明确Convert函数的功能。
输入：输入一个二叉搜索树的根节点。
过程：将其转化为一个有序的双向链表。
输出：返回该链表的头节点。
b.明确成员变量pLast的功能。pLast用于记录当前链表的末尾节点，
c.明确递归过程。
递归的过程就相当于按照中序遍历，将整个树分解成了无数的小树，然后将他们分别转化成了一小段一小段的双向链表。再利用pLast记录总的链表的末尾，然后将这些小段链表一个接一个地加到末尾。

27.题目，字符串的排列，输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。（输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。）
解答：
回溯法
方法1，递归算法
假设数字1，2，3
1打头，1，2，3，和1，3，2，然后2打头，2，1，3，和2，3，1最后3打头，3，1，2，和3，2，1

28.题目，数组中出现次数超过一半的数字，数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。
解答：
方法1，排序，中间就是出现最多的，然后统计数字即可
方法2，
在遍历数组时保存两个值：一是数组中一个数字，一是次数。遍历下一个数字时，若它与之前保存的数字相同，则次数加1，否则次数减1；若次数为0，则保存下一个数字，并将次数置为1。遍历结束后，所保存的数字即为所求。然后再判断它是否符合条件即可

29.题目,最小的k个数，输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。
解答：
方法1，用最大堆保存这k个数，每次只和堆顶比，如果比堆顶小，删除堆顶，新数入堆。
方法2，各种排序算法

30.题目，连续子数组的最大和，HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)
解答：
方法1，动态规划
F（i）：以array[i]为末尾元素的子数组的和的最大值，子数组的元素的相对位置不变
F（i）=max（F（i-1）+array[i] ， array[i]）
res：所有子数组的和的最大值
res=max（res，F（i））
如数组[6, -3, -2, 7, -15, 1, 2, 2]
初始状态：
    F（0）=6
    res=6
i=1：
    F（1）=max（F（0）-3，-3）=max（6-3，-3）=3
    res=max（F（1），res）=max（3，6）=6
i=2：
    F（2）=max（F（1）-2，-2）=max（3-2，-2）=1
    res=max（F（2），res）=max（1，6）=6
i=3：
    F（3）=max（F（2）+7，7）=max（1+7，7）=8
    res=max（F（2），res）=max（8，6）=8
i=4：
    F（4）=max（F（3）-15，-15）=max（8-15，-15）=-7
    res=max（F（4），res）=max（-7，8）=8
以此类推
最终res的值为8
方法2，遍历，遇到负和抛弃之前的结果，重新积累，期间保留最大值

31.题目,整数种1出现的字数（从1到n整数种1出现的次数），求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
解答：
方法1。
就是算出每一位上对应有的1的个数直接上代码
    int countDigitOne(int n) {
        int ones = 0;
        for (int m = 1; m <= n; m *= 10) {
            int a = n/m;
            int b = n%m;
            ones += (a + 8) / 10 * m + (a % 10 == 1 ?1:0) * (b + 1);
        }
        return ones;
    }

32.题目，把数组排成最小的输，输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。
解答：
方法1
自定义一个比较大小的函数，比较两个字符串s1, s2大小的时候，先将它们拼接起来，比较s1+s2,和s2+s1那个大，那个小就选择小的那个选择

33.题目，丑数，把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。
解答
方法1.
首先从丑数的定义我们知道，一个丑数的因子只有2,3,5，那么丑数p = 2 ^ x * 3 ^ y * 5 ^ z，换句话说一个丑数一定由另一个丑数乘以2或者乘以3或者乘以5得到，那么我们从1开始乘以2,3,5，就得到2,3,5三个丑数，在从这三个丑数出发乘以2,3,5就得到4，6,10,6，9,15,10,15,25九个丑数，我们发现这种方***得到重复的丑数，而且我们题目要求第N个丑数，这样的方法得到的丑数也是无序的。那么我们可以维护三个队列：
（1）丑数数组： 1
乘以2的队列：2
乘以3的队列：3
乘以5的队列：5
选择三个队列头最小的数2加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
（2）丑数数组：1,2
乘以2的队列：4
乘以3的队列：3，6
乘以5的队列：5，10
选择三个队列头最小的数3加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
（3）丑数数组：1,2,3
乘以2的队列：4,6
乘以3的队列：6,9
乘以5的队列：5,10,15
选择三个队列头里最小的数4加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
（4）丑数数组：1,2,3,4
乘以2的队列：6，8
乘以3的队列：6,9,12
乘以5的队列：5,10,15,20
选择三个队列头里最小的数5加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
（5）丑数数组：1,2,3,4,5
乘以2的队列：6,8,10，
乘以3的队列：6,9,12,15
乘以5的队列：10,15,20,25
选择三个队列头里最小的数6加入丑数数组，但我们发现，有两个队列头都为6，所以我们弹出两个队列头，同时将12,18,30放入三个队列；

题目34.第一个只出现一次的字符，在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）
解答：
方法1
利用每个字母的ASCII码作hash来作为数组的index。首先用一个58长度的数组来存储每个字母出现的次数，为什么是58呢，主要是由于A-Z对应的ASCII码为65-90，a-z对应的ASCII码值为97-122，而每个字母的index=int(word)-65，比如g=103-65=38，而数组中具体记录的内容是该字母出现的次数，最终遍历一遍字符串，找出第一个数组内容为1的字母就可以了，时间复杂度为O(n)

题目35.数组中的逆序对，在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007
题目保证输入的数组中没有的相同的数字
题目描述：
数据范围：
	对于%50的数据,size<=10^4
	对于%75的数据,size<=10^5
	对于%100的数据,size<=2*10^5
例子：输入：1,2,3,4,5,6,7,0
输出：7
例如在数组{7, 5, 6, 4}中，一共存在5个逆序对，分别是（7，6）、（7，5）、（7，4）、（5、4）、（6，4）。
解答：
本质是一个递归排序，
方法1:例如假设题目为（7，5，6，4，2，3，1，8）
a: (7,5) (6,4) (2,3) (1,8)  = 1 = 1
b: (4,5,6,7) (1,2,3,8)      = 3+2 = 5
c: (1,2,3,4,5,6,7,8)         = 3+3+3+3 =12
所以一共：18 

题目36.两个链表的第一个公共结点，题目输入两个链表，找出它们的第一个公共结点。
解答：
方法1:依次将链表中的元素压入两个栈中，然后每次从两个栈中抛出一个元素，直到抛出的结点相同时返回
后面的元素都是公共的。因为栈是先进后出的，从链表头开始进入，从尾部弹出，链表有公共元素，说明从一个点
之后都是相同的，既是从尾部出来的都是一样的，当第一个不一样的产生，这个的前一个就是相交的点
方法2：
思路一其实利用栈主要解决就是同时到达第一个结点的问题。那么从链表头出发如何同时到达第一个相同的结点呢? 链表的长度相同就可以，其实就是走的结点数目相同。所以可以让其中长的链表先走几步，剩余的长度到短链表的长度相同。

题目37.数字在排序数组中出现的次数，统计一个数字在排序数组中出现的次数
解答：
方法1:二分查找 找到第一个K 和 最后一个K 二者位置相减

题目38:二叉树的深度，输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。
解答：
递归遍历，深度优先

题目39:平衡二叉树，输入一棵二叉树，判断该二叉树是否是平衡二叉树。
解答：
方法1：遍历每个结点，借助一个获取树深度的递归函数，根据该结点的左右子树高度差判断是否平衡，然后递归地对左右子树进行判断。
方法2:这种做法有很明显的问题，在判断上层结点的时候，会多次重复遍历下层结点，增加了不必要的开销。如果改为从下往上遍历，如果子树是平衡二叉树，则返回子树的高度；如果发现子树不是平衡二叉树，则直接停止遍历，这样至多只对每个结点访问一次。

题目40.数组中只出现一次的数字
解答：一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。
首先：位运算中异或的性质：两个相同数字异或=0，一个数和0异或还是它本身。
当只有一个数出现一次时，我们把数组中所有的数，依次异或运算，最后剩下的就是落单的数，因为成对儿出现的都抵消了。
依照这个思路，我们来看两个数（我们假设是AB）出现一次的数组。我们首先还是先异或，剩下的数字肯定是A、B异或的结果，这个结果的二进制中的1，表现的是A和B的不同的位。我们就取第一个1所在的位数，假设是第3位，接着把原数组分成两组，分组标准是第3位是否为1。如此，相同的数肯定在一个组，因为相同数字所有位都相同，而不同的数，肯定不在一组。然后把这两个组按照最开始的思路，依次异或，剩余的两个结果就是这两个只出现一次的数字。
